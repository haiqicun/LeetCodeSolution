public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;
        int res = 0;
        int[] heights = new int[matrix[0].length];
        for (int j = 0; j < matrix.length; j++) {
            setHeights(matrix, heights, j);
            res = Math.max(res, maxArea(heights));
        }
        
        return res;
    }
    
    public void setHeights(char[][] matrix, int[] heights, int j) {
        for (int i = 0; i < matrix[0].length; i++) {
            if (matrix[j][i] == '0') {
                heights[i] = 0;
                continue;
            }
            heights[i] += 1;
        }
    }
    
    public int maxArea(int[] heights) {
        int max = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i <= heights.length; i++) {
            int h = i == heights.length ? 0 : heights[i];
            if (stack.isEmpty() || h >= heights[stack.peek()]) {
                stack.push(i);
            } else {
                int tp = stack.pop();
                max = Math.max(max, heights[tp] * (stack.isEmpty() ? i : i - 1 - stack.peek()));
                i--;
            }
        }
        return max;
    }
}
