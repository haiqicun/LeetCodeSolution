/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, inorder.length-1, 0);
    }
    
    private TreeNode buildTree(int[] preorder, int[] inorder, int start, int end, int index) {
        if (start > end) return null;
        TreeNode root = new TreeNode (preorder[index]);
        
        int inIndex = start;
        while (preorder[index] != inorder[inIndex]) inIndex++;
        root.left = buildTree(preorder, inorder, start, inIndex-1, index+1);
        root.right = buildTree(preorder, inorder, inIndex+1, end, index + inIndex - start + 1);
        return root;
        
    }
   
   
   
  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);
    }
    public TreeNode helper(int[] preorder, int start1, int end1, int[] inorder, int start2, int end2) {
        if (start2 > end2) return null;
        TreeNode root = new TreeNode(preorder[start1]);
        if (start2 == end2) return root;
        int index = start2;
        while (index <= end2) {
            if (inorder[index] == preorder[start1]) break;
            index++;
        }
        int len = index-start2;
        root.left = helper(preorder, start1+1, start1+len, inorder, start2, index-1);
        root.right = helper(preorder, start1+len+1, end1, inorder, index+1, end2);
        return root;
    }
}
