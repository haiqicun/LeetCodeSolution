Time complexity: O(max(len1,len2)); Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
       // if(headA==null||headB==null) return null;
        int len1 = 0;
        int len2 = 0;
        ListNode cur1 = headA;
        ListNode cur2 = headB;
        
        while(cur1!=null){
            len1++;
            cur1 = cur1.next;
        }
        
        while(cur2!=null){
            len2++;
            cur2 = cur2.next;
        }
        
        while(len1!=len2){
            if(len1>len2){
                headA = headA.next;
                len1--;
            }
            else{
                headB = headB.next;
                len2--;
            }
        }
        
        while(headA!=null&&headA!=headB){
            headA = headA.next;
            headB = headB.next;
        }
        
        return headA;
        
    }
}
