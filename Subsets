public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        /*List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
        list.add(new ArrayList<>(tempList));
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }*/
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<Integer>());
        
        //Arrays.sort(nums);
        for(int i : nums) {
            int size = res.size();
            for(int j = 0; j < size; j++) {
                List<Integer> a = new ArrayList<>(res.get(j));
                a.add(i);
                res.add(a);
            }
        }
        return res;
    }
}
//The number of recursive calls, T(n) satisfies the recurrence T(n) = T(n - 1) + T(n - 2) + ... + T(1) + T(0), which solves to T(n) = O(2^n). Since we spend O(n) time within a call, the time complexity is O(n2^n);
