Time complexity: O(n); Space complexity: O(n)

public class Solution {
    public int longestConsecutive(int[] nums) {
        
        if(nums==null||nums.length==0) return 0;
        
        int res = 0;
        
        HashSet<Integer> myset = new HashSet<Integer>();
        
        for(int i=0;i<nums.length;i++){
            if(!myset.contains(nums[i])){
                myset.add(nums[i]);
            }
        }
        
        while(!myset.isEmpty()){
            
            Iterator iter = myset.iterator();
            int temp = (Integer)iter.next();
            myset.remove(temp);
            int size = 1;
            int templ = temp+1;
            int temps = temp-1;
            while(myset.contains(templ)){
                myset.remove(templ);
                templ++;
                size++;
            }
            while(myset.contains(temps)){
                myset.remove(temps);
                temps--;
                size++;
            }
            
            res = Math.max(size,res);
            
        }
        
        return res;
        
    }
}
