/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    
    public class MerComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }
    }
    public List<Interval> merge(List<Interval> intervals) {
        
        if (intervals == null || intervals.size() < 2) return intervals;
        
        List<Interval> res = new ArrayList<Interval>();
        Collections.sort(intervals, new MerComparator());
        
        int s = intervals.get(0).start;
        int e = intervals.get(0).end;
        for (int i = 1; i < intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if (e < cur.start) {
                Interval tmp = new Interval(s, e);
                res.add(tmp);
                s = cur.start;
                e = cur.end;
            }
            else if (e < cur.end) {
                e = cur.end;
            }
        }
        res.add(new Interval(s,e));
        
        return res;
    }
}
// time complexity O(nlog); space complexity: O(size of intervals)
