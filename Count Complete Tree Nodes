/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        
        if (root == null) return 0;
        
        int left = getNum(root, true);
        int right = getNum(root, false);
        
        if (left == right) return (1<<left) - 1;
        
        return 1 + countNodes(root.left) + countNodes(root.right);
        
    }
    
    public int getNum(TreeNode node, boolean left) {
        if (node == null) return 0;
        int count = 0;
        while (node != null) {
            count++;
            if (left) {
                node = node.left;
            } else {
                node = node.right;
            }
        }
        return count;
    }
}
