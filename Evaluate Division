class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        
        HashMap<String, HashMap<String, Double>> map = new HashMap<String, HashMap<String, Double>>();
        
        for (int i = 0; i < values.length; i++) {
            List<String> equation = equations.get(i);
            String a = equation.get(0);
            String b = equation.get(1);
            map.putIfAbsent(a, new HashMap<String, Double>());
            map.get(a).putIfAbsent(b, values[i]);
            
            map.putIfAbsent(b, new HashMap<String, Double>());
            map.get(b).putIfAbsent(a, 1.0/values[i]);
        }
        
        double[] res = new double[queries.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = dfs(map, queries.get(i).get(0), queries.get(i).get(1), 1.0, new HashSet<String>());
        }
        return res;
    }
    
    private double dfs(HashMap<String, HashMap<String, Double>> map, String s, String e, double curent, HashSet<String> visited) {
        if (!map.containsKey(s)) return -1;
        if (visited.contains(s)) return -1;
        visited.add(s);
        if (s.equals(e)) return curent;
        
        for (Map.Entry<String, Double> entry : map.get(s).entrySet()) {
            double temp = dfs(map, entry.getKey(), e, curent * entry.getValue(), visited);
            if (temp != -1) return temp;
        }
        visited.remove(s);
        return -1.0;
    }
}

Time Complexity: O(e*q)
Space Complexity: O(e)
