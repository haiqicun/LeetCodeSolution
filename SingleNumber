Time complexity: O(n); Space complexity: O(1);

public class Solution {
    public int singleNumber(int[] A) {
        
        if(A==null||A.length==0) return -1;
        int res = A[0];
        if(A.length==1) return res;
        for(int i=1;i<A.length;i++){
            res = res^A[i];
        }
        
        return res;
        
    }
}



Python:
class Solution:
    # @param {integer[]} nums
    # @return {integer}
    def singleNumber(self, nums):
        
        res = nums[0]
        for i in range(1,len(nums)):
            res  = res^nums[i]
            
        return res
        
        
        
        class Solution:
    # @param {integer[]} nums
    # @return {integer}
    def singleNumber(self, nums):
        
        myset = set({})
        for i in range(0,len(nums)):
            if nums[i] in myset:
                myset.remove(nums[i])
            else:
                myset.add(nums[i])
        return myset.pop()
