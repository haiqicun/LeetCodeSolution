/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int goodNodes(TreeNode root) {
        if (root == null) return 0;
        int res = 0;
        Stack<TreeNode> stack = new Stack<>();
        PriorityQueue<TreeNode> queue = new PriorityQueue<>((n1, n2) -> n2.val-n1.val);
        
        stack.push(root);
        queue.offer(root);
        
        while (!stack.isEmpty()) {
            TreeNode node = stack.peek();
            if (node.left == null && node.right == null) {
                stack.pop();
                if (node.val >= queue.peek().val) res++;
                queue.remove(node);
            }
            if (node.left != null) {
                stack.push(node.left);
                queue.offer(node.left);
                node.left = null;
            } else if (node.right != null) {
                stack.push(node.right);
                queue.offer(node.right);
                node.right = null;
            }
        }
        
        return res;
    }
}


class Solution {
    public int goodNodes(TreeNode root) {
        return helper(root, root.val);
    }
    
    public int helper(TreeNode root, int max) {
        if (root == null) return 0;
        
        int res = root.val >= max ? 1 : 0;
        max = Math.max(max, root.val);
        
        res += helper(root.left, max);
        res += helper(root.right, max);
        return res;
    }
}
