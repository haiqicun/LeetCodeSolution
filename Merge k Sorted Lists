/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        
        return merge(lists, 0, lists.length - 1);
    }
    
    public ListNode merge(ListNode[] lists, int start, int end) {
        if (start > end) return null;
        if (start == end) return lists[start];
        
        int mid = (start + end) / 2;
        ListNode left = merge(lists, start, mid);
        ListNode right = merge(lists, mid + 1, end);
        return sort(left, right);
    }
    
    public ListNode sort(ListNode left, ListNode right) {
        if (left == null) return right;
        if (right == null) return left;
        
        ListNode dummy = new ListNode(0);
        ListNode pre = dummy;
        
        while (left != null && right != null) {
            if (left.val < right.val) {
                pre.next = left;
                pre = left;
                left = left.next;
            } else {
                pre.next = right;
                pre = right;
                right = right.next;
            }
        }
        
        pre.next = left == null ? right : left;
        
        return dummy.next;
    }
}

Time Complexity: O(nlogk)
Space Complexity: O(logk)
