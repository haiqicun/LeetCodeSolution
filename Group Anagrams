class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> res = new ArrayList<List<String>>();
        
        if (strs == null || strs.length == 0) return res;
        HashMap<String, List<String>> map = new HashMap<String, List<String>>();
        
        for (String s : strs) {
            char[] cs = s.toCharArray();
            Arrays.sort(cs);
            String target = String.valueOf(cs);
            if (!map.containsKey(target)) {
                List<String> list = new ArrayList<String>();
                list.add(s);
                map.put(target, list);
                continue;
            }
            map.get(target).add(s);
            
        }
        
        Iterator it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry me = (Map.Entry)it.next();
            ArrayList<String> tempList = (ArrayList<String>) me.getValue();
            res.add(tempList);
        }
        
        return res;
    }
}



Runtime Complexity
The outer for loop is O(n) complexity, where n = the length of the array.

The sort operation on the character array, assuming the Java implementation of sort uses the most efficient complexity, has the runtime of O(k log(k)).

Therefore the runtime complexity of O(n klog(k)).

Space Complexity
We are creating a new map that holds all n elements of the array, so O(n).

For each word we create a local variable of size O(k), the size of the word.

Therefore the space complexity is O(nk).
