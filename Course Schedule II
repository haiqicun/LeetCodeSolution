class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] res = new int[numCourses];
        if (prerequisites == null || prerequisites.length == 0) {
            for (int i = 0; i < numCourses; i++) {
                res[i] = i;
            }
            return res;
        }
        
        int[] preNums = new int[numCourses];
        int validCourses = 0;
        for (int i = 0; i < prerequisites.length; i++) {
            preNums[prerequisites[i][0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int k = 0; k < numCourses; k++) {
            if (preNums[k] == 0) {
                queue.offer(k);
            }
        }
        
        while (!queue.isEmpty()) {
            int c = queue.poll();
            res[validCourses++] = c;
            for (int k = 0; k < prerequisites.length; k++) {
                if (prerequisites[k][1] == c) {
                    int target = prerequisites[k][0];
                    preNums[target]--;
                    if (preNums[target] == 0) queue.offer(target);
                }
            }
        }
        if (validCourses != numCourses) res = new int[0];
        return res;
    }
}
