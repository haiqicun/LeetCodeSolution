Time complexity: O(1+2+...+n) = O(n^2); Space complexity: O(n);

public class Solution {
    public class Solution {
    public int numTrees(int n) {
        if(n<=1) return 1;
        
        int[] res = new int[n+1];
        res[0] = 1;
        res[1] = 1;
        for(int i=2;i<n+1;i++){
            for(int j=1;j<=i;j++){
                res[i] = res[i]+res[j-1]*res[i-j];
            }
        }
        
        return res[n];
    }
}


public class Solution {
    public int numTrees(int n) {
        
        if(n<=1) return 1;
        
        return helper(1,n);
        
    }
    
    public int helper(int left, int right){
        if(left==right) return 1;
        int res = 0;
        for(int i=left;i<=right;i++){
            int leftnum = helper(left,i-1);
            for(int j=i+1;j<=right;j++){
                int rightnum = helper(j,right);
                res = res+leftnum*rightnum;
            }
        }
        
        return res;
    }
}
