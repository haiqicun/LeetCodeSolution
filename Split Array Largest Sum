class Solution {
    public int splitArray(int[] nums, int m) {
        if (nums == null || nums.length == 0) return 0;
        
        int n = nums.length;
        int[][] dp = new int[m][n];
        dp[0][0] = nums[0];
        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j-1] + nums[j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = i; j < n; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = 0; k < j; k++) {
                    min = Math.min(min, Math.max(dp[i-1][k], dp[0][j]-dp[0][k]));
                }
                dp[i][j] = min;
            }
        }
        return dp[m-1][n-1];
    }
}



class Solution {
    public int splitArray(int[] nums, int m) {
        int l = 0;
        int r = 0;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            r += nums[i];
        }
        while (l <= r) {
            int mid = (l+r)/2;
            if (guess(mid, m, nums)) {
                res = mid;
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        return res;
    }
    
    public boolean guess(int target, int m, int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > target) return false;
            if (sum + nums[i] > target) {
                m--;
                sum = nums[i];
            } else {
                sum += nums[i];
            }
        }
        
        return m >= 1;
    }
}

n: length of nums.
Time Complexity: O(log(sum(nums) * n)
Space Complexity: O(1)
