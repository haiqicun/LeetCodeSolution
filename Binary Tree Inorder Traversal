/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 Time complexity : O(n) ; Space complexity : O(logn);
 
public class Solution {    
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        helper(root, res);
        return res;
    }
    
    public void helper(TreeNode root, ArrayList<Integer> res){
        
        if(root==null) return;
        
        helper(root.left,res);
        res.add(root.val);
        helper(root.right,res);
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 Time complexity : O(n) ; Space complexity : O(logn);
 
 
public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root==null) return res;
        
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        mystack.push(root);
        
        while(!mystack.empty()){
            TreeNode tempnode = mystack.peek();
            if(tempnode.left==null){
                mystack.pop();
                res.add(tempnode.val);
                if(tempnode.right!=null) mystack.push(tempnode.right);
            }
            
            else{
                mystack.push(tempnode.left);
                tempnode.left=null;
            }
        }
        
        return res;
        
    }
}
