/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        //return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
        return isValidBST(root, null, null);
    }
    public boolean isValidBST(TreeNode root, Integer minVal, Integer maxVal) {
        if (root == null) return true;
        if ((maxVal != null && root.val >= maxVal) || (minVal != null && root.val <= minVal)) return false;
        return isValidBST(root.left, minVal, root.val) && isValidBST(root.right, root.val, maxVal);
    }
}

/* all left node first. and record the pre node and compare pre node with cur node. at last return true.
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
        TreeNode pre = null;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (pre != null && (root.val <= pre.val)) return false;
            pre = root;
            root = root.right;
        }
        return true;
    }
}
*/
// time complexity: O(n) ; space complexity: O(logn)
