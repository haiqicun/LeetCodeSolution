public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        if (digits == null || digits.length() == 0) return res;
        
        res.add("");
        
        for (int i = 0; i < digits.length(); i++) {
            String l = getLetter(digits.charAt(i));
            List<String> myres = new ArrayList<String>();
            for (int j = 0; j < res.size(); j++) {
                String tmp = res.get(j);
                for (int k = 0; k < l.length(); k++) {
                    myres.add(tmp + l.charAt(k));
                }
            }
            res = myres;
        }
        
        return res;
    }
    
    public String getLetter(char digit) {
        switch (digit) {
            case '2' :
                return "abc";
            case '3' :
                return "def";
            case '4' :
                return "ghi";
            case '5' :
                return "jkl";
            case '6' :
                return "mno";
            case '7' :
                return "pqrs";
            case '8' :
                return "tuv";
            case '9' :
                return "wxyz";
            case '0' :
                return " ";
            default :
                return "";
        }
    }
}

/*
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if (digits == null || digits.length() == 0) return res;
        res.add("");
        String[] arr = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        for (int i = 0; i < digits.length(); i++) {
            List<String> list = new ArrayList<String>();
            int index = Integer.parseInt(digits.substring(i, i+1));
            String letters = arr[index];
            for (String pre : res) {
                for (int j = 0; j < letters.length(); j++) {
                    list.add(pre+letters.charAt(j));
                }
            }
            res = list;
        }
        
        return res;
    }
}
*/
// average length of letters of each number is: m; length of nums is: n
// complexity is m^n
