Time complexity: NP; Space complexity: NP

public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num==null || num.length==0) return res;
        helper(num,new boolean[num.length],new ArrayList<Integer>(), res);
        
    }
    
    public void helper(int[] num, boolean[] used,ArrayList<Integer> item, ArrayList<ArrayList<Integer>> res){
        
        if(item.size()==num.length){
            res.add(new ArrayList<Integer>(item));
            return;
        }
        
        for(int i=0;i<num.length;i++){
            if(!used[i]){
                used[i] = true;
                item.add(num[i]);
                helper(num,used,item,res);
                item.remove(item.size()-1);
                used[i] = false;
            }
        }
        
    }
}


public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] nums) {
        
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(nums==null||nums.length==0) return res;
        ArrayList<Integer> item = new ArrayList<Integer>();
        item.add(nums[0]);
        res.add(item);
        
        for(int i=1;i<nums.length;i++){
            ArrayList<ArrayList<Integer>> newRes = new ArrayList<ArrayList<Integer>>();
            
            for(int j=0;j<res.size();j++){
                
                for(int k=0;k<res.get(j).size()+1;k++){
                    res.get(j).add(k,nums[i]);
                    ArrayList<Integer> temp = new ArrayList<Integer>(res.get(j));
                    newRes.add(temp);
                    res.get(j).remove(k);
                }
            }
            
            res = newRes;
        }
        
        return res;
    }
}
