Time complexity: O(n); Space complexity: O(logn)

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        if(root==null) return true;
        
        return helper(root.left,root.right);
        
    }
    
    public boolean helper(TreeNode leftone, TreeNode rightone){
        if(leftone==null&&rightone==null) return true;
        else if(leftone==null||rightone==null) return false;
        if(leftone.val==rightone.val&&helper(leftone.left,rightone.right)&&helper(leftone.right,rightone.left)) return true;
        return false;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        if(root==null) return true;
        if(root.left==null&&root.right==null) return true;
        if(root.left==null||root.right==null) return false;
        
        Queue<TreeNode> myqueue = new LinkedList<TreeNode>();
        myqueue.offer(root.left);
        myqueue.offer(root.right);
        
        while(!myqueue.isEmpty()){
            TreeNode n1 = myqueue.poll();
            TreeNode n2 = myqueue.poll();
            if(n1.val!=n2.val) return false;
            if(n1.left==null&&n2.right!=null||n1.right==null&&n2.left!=null) return false;
            if(n2.left==null&&n1.right!=null||n2.right==null&&n1.left!=null) return false;
            if(n1.left!=null&&n2.right!=null){
                myqueue.offer(n1.left);
                myqueue.offer(n2.right);
            }
            if(n1.right!=null&&n2.left!=null){
                myqueue.offer(n1.right);
                myqueue.offer(n2.left);
            }
        }
        
        return true;
    }
}
