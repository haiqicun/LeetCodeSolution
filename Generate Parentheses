Time complexity: O(amount of results); Space complexity:(amount of results)

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        if (n == 0) return res;
        
        dfs(n, n, new StringBuilder(), res);
        
        return res;
    }
    
    public void dfs(int left, int right, StringBuilder sb, List<String> res) {
        if (left > right) return;
        
        if (left == 0 && right == 0) {
            res.add(sb.toString());
            return;
        }
        
        if (left > 0) {
            dfs(left - 1, right, sb.append('('), res);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (right > 0) {
            dfs(left, right - 1, sb.append(')'), res);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
