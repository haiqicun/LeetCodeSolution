/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */

class Solution {
    int[][] dir = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    public void cleanRoom(Robot robot) {
        Set<String> visited = new HashSet<String>();
        dfs(robot, visited, 0, 0, 0);
    }

    private void dfs(Robot robot, Set<String> visited, int x, int y, int curD) {
        String key = x + "," + y;
        if (visited.contains(key)) return;
        robot.clean();
        visited.add(key);

        for (int i = 0; i < 4; i++) {
            if (robot.move()) {
                int dx = x + dir[curD][0];
                int dy = y + dir[curD][1];

                dfs(robot, visited, dx, dy, curD);

                robot.turnLeft();
                robot.turnLeft();
                robot.move();
                robot.turnLeft();
                robot.turnLeft();
            }
            robot.turnRight();
            curD = (curD+1) % 4;
        }
    }
}


Time Complexity: O(m*n)
Space Complexity: O(m*n)
