/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 * 
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 Time complexity : O(n) ; Space complexity : O(logn);
 
public class Solution {
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root==null) return res;
        
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        
        mystack.push(root);
        
        while(!mystack.empty()){
            TreeNode tempnode = mystack.pop();
            res.add(tempnode.val);
            if(tempnode.right!=null) mystack.push(tempnode.right);
            if(tempnode.left!=null) mystack.push(tempnode.left);
        }
        return res;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 Time complexity : O(n) ; Space complexity : O(logn);
 
public class Solution {
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        helper(root, res);
        
        return res;
        
    }
    
    public void helper(TreeNode root, ArrayList<Integer> res){
        if(root==null) return;
        res.add(root.val);
        helper(root.left,res);
        helper(root.right,res);
    }
}



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param {TreeNode} root
    # @return {integer[]}
    def preorderTraversal(self, root):
        
        if root!=None:
            list = [root.val]
            list = list+self.preorderTraversal(root.left)
            list = list+self.preorderTraversal(root.right)
        else:
            list = []
        return list
