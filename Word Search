public class Solution {
    public boolean exist(char[][] board, String word) {
        /*char[] w = word.toCharArray();
        for (int y=0; y<board.length; y++) {
    	    for (int x=0; x<board[y].length; x++) {
    		    if (exist(board, y, x, w, 0)) return true;
    	    }
        }
        return false;
    }

    private boolean exist(char[][] board, int y, int x, char[] word, int i) {
	    if (i == word.length) return true;
	    if (y<0 || x<0 || y == board.length || x == board[y].length) return false;
	    if (board[y][x] != word[i]) return false;
	    board[y][x] ^= 128;
	    boolean exist = exist(board, y, x+1, word, i+1)
		    || exist(board, y, x-1, word, i+1)
		    || exist(board, y+1, x, word, i+1)
		    || exist(board, y-1, x, word, i+1);
	    board[y][x] ^= 128;
	    return exist;*/
	    for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (helper(i, j, 0, word,board) == true) {
                        return true;
                    }
                }
            }
            
        }
        return false;
    }
    
    private boolean helper(int i, int j, int index, String word, char[][] board) {
        if (index == word.length()) {
            return true;
        }
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }
        char tmp = board[i][j];
        board[i][j] = '#';
        
        boolean rst = helper(i + 1, j, index + 1, word, board) || helper(i, j + 1, index + 1, word, board) || helper(i, j - 1, index + 1, word, board) || helper(i - 1, j, index + 1, word, board);
        
        board[i][j] = tmp;
        return rst;
    }
}//k is the length of word
//Time complexity: O(mn4^k); Space complexity: O(k)
