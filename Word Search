class Solution {
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfs(board, i, j, word, 0)) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, int i, int j, String word, int k) {
        if (i < 0 || i > board.length-1 || j < 0 || j > board[0].length-1 || k > word.length()-1) return false;
        
        char c = board[i][j];
        if (c == '#') return false;
        if (c == word.charAt(k)) {
            if (k == word.length()-1) return true;
            board[i][j] = '#';
            if (dfs(board, i-1, j, word, k+1) || dfs(board, i, j-1, word, k+1) || dfs(board, i+1, j, word, k+1) || dfs(board, i, j+1, word, k+1)) return true;
            board[i][j] = c;
        }
        return false;
    }
}//k is the length of word
//Time complexity: O(mn4^k); Space complexity: O(k)
