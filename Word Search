class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0) return false;
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (search(board, i, j, word, 0)) return true;
            }
        }
        
        return false;
    }
    
    public boolean search(char[][] board, int m, int n, String word, int index) {
        if (m < 0 || m >= board.length || n < 0 || n >= board[0].length) return false;
        if (word.charAt(index) != board[m][n]) return false;
        if (index == word.length() - 1) return true;
        
        char c = board[m][n];
        board[m][n] = '#';
        
        boolean res = search(board, m+1, n, word, index+1) || search(board, m-1, n, word, index+1)
            || search(board, m, n+1, word, index+1) || search(board, m, n-1, word, index+1);
        
        board[m][n] = c;
        
        return res;
    }
}
}//k is the length of word
//Time complexity: O(mn4^k); Space complexity: O(k)
