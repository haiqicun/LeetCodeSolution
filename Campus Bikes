class Solution {
    public int[] assignBikes(int[][] workers, int[][] bikes) {
        int[] res = new int[workers.length];
        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b)->a[2]==b[2]?(a[0]==b[0]?a[1]-b[1]:a[0]-b[0]):a[2]-b[2]);
        for (int i = 0; i < workers.length; i++) {
            for (int j = 0; j < bikes.length; j++) {
                queue.offer(new int[]{i, j, Math.abs(workers[i][0]-bikes[j][0])+Math.abs(workers[i][1]-bikes[j][1])});
            }
        }

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (workers[cur[0]][0] == -1 || bikes[cur[1]][0] == -1) continue;
            res[cur[0]] = cur[1];
            workers[cur[0]][0] = -1;
            bikes[cur[1]][0] = -1; 
        }

        return res;
    }
}

Time Complexity: O(m*n*log(m*n))
Space Complexity: O(m*n)
