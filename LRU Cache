class LRUCache {
    
    int capacity;
    int count;
    Node first;
    Node last;
    Map<Integer, Node> map;
    
    class Node {
        int key;
        int val;
        Node pre;
        Node next;
        public Node(int key, int val) {
            this.key = key;
            this.val = val;
            pre = null;
            next = null;
        }
    }

    public LRUCache(int capacity) {
        this.capacity = capacity;
        count = 0;
        first = null;
        last = null;
        map = new HashMap<Integer, Node>();
    }
    
    public int get(int key) {
        Node node = map.get(key);
        if (node == null) return -1;
        if (capacity == 1 || node == last) return node.val;
        if (node == first) {
            first = first.next;
            first.pre = null;
        } else {
            node.next.pre = node.pre;
            node.pre.next = node.next;
        }
        
        last.next = node;
        node.pre = last;
        last = node;
        last.next = null;
        return node.val;
    }
    
    public void put(int key, int value) {
        Node node = map.get(key);
        if (node != null) { // The key is in the cache.
            node.val = value;
            if (capacity == 1 || node == last) return;
            if (first == node) {
                first = first.next;
                first.pre = null;
            } else {
                node.next.pre = node.pre;
                node.pre.next = node.next;
            }
            last.next = node;
            node.pre = last;
            last = node;
            last.next = null;
        } else { // The key is not in the cache
            if (count == capacity) {
                map.remove(first.key);
                if (capacity == 1) {
                    first = null;
                    last = null;
                } else {
                    first = first.next;
                    first.pre = null;
                }
                count--;
            }
            node = new Node(key, value);
            map.put(key, node);
            count++;
            if (capacity == 1 || count ==1) {
                first = node;
                last = node;
            } else {
                last.next = node;
                node.pre = last;
                last = node;
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
