public class LRUCache {
    class Node  
    {  
        Node pre, next;  
        int key;  
        int val;  
        public Node(int key, int value)  
        {  
            this.key = key;  
            this.val = value;  
        }  
    }  
      
    private int capacity;  
    private int num;  
    private HashMap<Integer, Node> map;  
    private Node first, last;

    public LRUCache(int capacity) {
        this.capacity = capacity;  
        num = 0;  
        map = new HashMap<Integer, Node>();  
        first = null;  
        last = null;
    }
    
    public int get(int key) {
        Node node = map.get(key);  
        if(node == null)  
            return -1;  
        if (capacity == 1 || node == last) return node.val;
        if (node == first) {
            first = first.next;
            first.pre = null;
        } else {
            node.next.pre = node.pre;
            node.pre.next = node.next;
        }
        last.next = node;
        node.pre = last;
        last = node;
        last.next = null;
        return node.val;
    }
    
    public void put(int key, int value) {
        Node node = map.get(key);  
        if(node != null)  
        {  
            node.val = value;  
            if (capacity == 1 || node == last) return;
            if (node == first) {
                first = first.next;
                first.pre = null;
            } else {
                node.pre.next = node.next;
                node.next.pre = node.pre;
            }
            last.next = node;
            node.pre = last;
            last = node;
            last.next = null;
        }  
        else   
        {  
            Node newNode = new Node(key,value);  
  
            if(num==capacity)  
            {  
                map.remove(first.key);  
                if (capacity == 1) {
                    first = null;
                    last = null;
                } else {
                    first = first.next;
                    first.pre = null;
                }
                num--;      
            }
            num++;
            map.put(key, newNode);
            if(capacity == 1 || num == 1)  
            {  
                first = newNode;  
                last = first;
            }  
            else  
            {  
                last.next = newNode;
                newNode.pre = last;  
                last = newNode;
            }  
            
        }
        
    }
}
