class Solution {
    // Adjacency list for easier access to the graph
    Map<Integer, List<Integer>> adjMap;
    // Stores the earliest time any given node is reachable
    int[] earliestTime;
    // Monotonically increasing as any unique node is visited, starting from "1"
    int timestamp;
    // The list returned
    List<List<Integer>> retList;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        timestamp = 0;
        earliestTime = new int[n];
        adjMap = new HashMap<>();
        retList = new LinkedList<>();
        
        // Add all nodes in the map
        for (int node = 0; node < n; node++) {
            adjMap.put(node, new LinkedList<Integer>());
        }
        
        // Remembering the map is undirected, we need to add an entry for each direction
        for (List<Integer> connection: connections) {
            adjMap.get(connection.get(0)).add(connection.get(1));
            adjMap.get(connection.get(1)).add(connection.get(0));
        }
        
        // Run DFS
        dfs(0, -1);
        
        return retList;
    }
    
    private void dfs(int currNode, int parentNode) {
        // Only valid nodes are visited, no need of boundary check
        
        // The logic ensures this marks visit to an unvisited node, hence record the timestamp
        earliestTime[currNode] = ++timestamp;
        // This marks the timestamp we labeled the node when we first visited it
        int currTime = earliestTime[currNode]; 
        
        List<Integer> neighbors = adjMap.get(currNode);
        
        for (int nextNode : neighbors) {
            if (nextNode == parentNode) {
                // This won't give us any new information
                continue;
            }
            
            // Visit the next node if it has not been visited
            if (earliestTime[nextNode] == 0) {
                dfs(nextNode, currNode);
            }
            // This processing step is critical, and is done regardless if the neighbor gets visited in the
            // line above
            // As we continue DFS recursively, we record the minimum value for "earliestTime" while
            // comparing with next node. This ensures that if there is a different path to the next node,
            // then the earliest time of the next node will be same or less than the time we first arrived
            // at current node. 
            earliestTime[currNode] = Math.min(earliestTime[currNode], earliestTime[nextNode]);
            if (earliestTime[nextNode] > currTime) {
                // Found critical edge
                retList.add(List.of(currNode, nextNode));
            }
        }
    }
}
