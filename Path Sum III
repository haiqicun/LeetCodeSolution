/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = 0;
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        helper(root, sum, new ArrayList<Integer>());
        return res;
    }
    
    public void helper(TreeNode root, int sum, List<Integer> list) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) + root.val == sum) res++;
            list.set(i, list.get(i)+root.val);
        }
        if (root.val == sum) res++;
        list.add(root.val);
        if (root.left != null && root.right != null) {
            List<Integer> temp = new ArrayList<>(list);
            helper(root.left, sum, list);
            helper(root.right, sum, temp);
        } else if (root.left != null) {
            helper(root.left, sum, list);
        } else if (root.right != null) {
            helper(root.right, sum, list);
        }
    }
}


public class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int sum) {
        if (root == null)return 0;
        helper(root,sum);
        pathSum(root.left,sum);
        pathSum(root.right,sum);
        return count;
    }
    public void helper(TreeNode root,int sum){
        if(root == null)return;
        if(root.val - sum == 0)count++;
        helper(root.left, sum - root.val);
        helper(root.right, sum - root.val);
    }
}


class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    int ans = 0;
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        map.put(0, 1);
        dfs(root, 0, sum);
        return ans;
    }
    
    public void dfs(TreeNode root, int cur, int sum) {
        if (root == null) return;
        
        int temp = cur + root.val;
        if (map.containsKey(temp - sum)) ans += map.get(temp - sum);
        if (map.containsKey(temp)) map.put(temp, map.get(temp)+1);
        else map.put(temp, 1);
        dfs(root.left, temp, sum);
        dfs(root.right, temp, sum);
        
        if (map.containsKey(temp)) {
            int num = map.get(temp);
            num--;
            if (num == 0) map.remove(temp);
            else map.put(temp, num);
        }
    }
}
