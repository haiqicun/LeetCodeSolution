Time complexity: O(n); Space complexit: O(logn);

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        if(root==null) return res;
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        mystack.push(root);
        while(!mystack.empty()){
            TreeNode temp = mystack.peek();
            if(temp.left==null&&temp.right==null){
                res.add(temp.val);
                mystack.pop();
            }
            if(temp.right!=null){
                mystack.push(temp.right);
                temp.right=null;
            }
            if(temp.left!=null){
                mystack.push(temp.left);
                temp.left=null;
            }
            
        }
        
        return res;
        
    }
}




class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    public void helper(TreeNode root, List<Integer> res) {
        if (root == null) return;
        helper(root.left, res);
        helper(root.right, res);
        res.add(root.val);
    }
}
