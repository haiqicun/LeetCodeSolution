public class WordDictionary {
    
    TrieNode root = new TrieNode();

    /** Initialize your data structure here. */
    public WordDictionary() {
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode parent = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (parent.children[c-'a'] == null) {
                parent.children[c-'a'] = new TrieNode();
            }
            parent = parent.children[c-'a'];
        }
        parent.leaf = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return helper(root, word);
    }
    
    private boolean helper(TrieNode node, String word) {
        if (node == null) return false;
        if (word.length() == 0) return node.leaf;
        
        if (word.charAt(0) == '.') {
            for (TrieNode n : node.children) {
                if (helper(n, word.substring(1))) return true;
            }
            return false;
        }
        if (node.children[word.charAt(0) - 'a'] == null) return false;
        return helper(node.children[word.charAt(0) - 'a'], word.substring(1));
    }
}

class TrieNode {
    boolean leaf;
    TrieNode[] children = new TrieNode[26];
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
