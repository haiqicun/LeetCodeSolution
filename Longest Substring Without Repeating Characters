class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) return 0;
        int max = 1;
        int start = 0;
        for (int i = 1; i < s.length(); i++) {
            int pos = findIndex(s, start, i);
            if (pos != -1) {
                max = Math.max(max, i-start);
                start = pos+1;
            }
        }
        max = Math.max(max, s.length()-start);
        return max;
    }
    
    public int findIndex(String s, int start, int end) {
        char c = s.charAt(end);
        for (int i = start; i < end; i++) {
            if (s.charAt(i) == c) return i;
        }
        return -1;
    }
}




class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) return 0;
        if (s.length() == 1) return 1;
        
        int res = 0;
        int start = 0;
        int end = 0;
        Set<Character> set = new HashSet<>();
        
        while (start < s.length() && end < s.length()) {
            if (set.contains(s.charAt(end))) {
                set.remove(s.charAt(start++));
            } else {
                set.add(s.charAt(end++));
                res = Math.max(res, end - start);
            }
        }
        
        return res;
    }
}
