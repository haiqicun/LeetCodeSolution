/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 
 Time complexity: O(n); Space complexity: O(1);
public class Solution {
    public void connect(TreeLinkNode root) {
        
        if(root==null) return;
        
        TreeLinkNode lastHead = root;
        TreeLinkNode pre = null;
        TreeLinkNode curHead = null;
        while(lastHead!=null){
            TreeLinkNode lastCur = lastHead;
            while(lastCur!=null){
                if(lastCur.left!=null){
                    if(curHead==null){
                        curHead = lastCur.left;
                        pre = curHead;
                    }
                    else{
                        pre.next = lastCur.left;
                        pre = pre.next;
                    }
                }
                if(lastCur.right!=null){
                    if(curHead==null){
                        curHead = lastCur.right;
                        pre = curHead;
                    }
                    else{
                        pre.next = lastCur.right;
                        pre = pre.next;
                    }
                }
                
                lastCur = lastCur.next;
            }
            
            lastHead = curHead;
            curHead = null;
        }
        
    }
}

/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        
        if(root==null) return;
        root.next = null;
        TreeLinkNode nextstart = root.left;
        TreeLinkNode current = root;
        while(nextstart!=null){
            
            current.left.next = current.right;
            while(current.next!=null){
                current.right.next = current.next.left;
                current.next.left.next = current.next.right;
                current = current.next;
            }
            current.right.next = null;
            current = nextstart;
            nextstart = nextstart.left;
        }
        
    }
}



/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 Time complexity: O(n); Space complexity: O(n);
 
public class Solution {
    public void connect(TreeLinkNode root) {
        
        if(root==null) return;
        Queue<TreeLinkNode> myqueue = new LinkedList<TreeLinkNode>();
        
        myqueue.offer(root);
        int lastnum = 1;
        int curnum = 0;
        while(!myqueue.isEmpty()){
            TreeLinkNode prenode = myqueue.poll();
            for(int i=2;i<=lastnum;i++){
                TreeLinkNode curnode = myqueue.poll();
                prenode.next = curnode;
                if(prenode.left!=null){
                    myqueue.offer(prenode.left);
                    curnum++;
                } 
                if(prenode.right!=null){
                    myqueue.offer(prenode.right);
                    curnum++;
                }
                prenode = curnode;
            }
            prenode.next=null;
            if(prenode.left!=null){
                myqueue.offer(prenode.left);
                curnum++;
              } 
            if(prenode.right!=null){
                 myqueue.offer(prenode.right);
                 curnum++;
              }
           lastnum = curnum;
           curnum = 0;
            
        }
        
    }
}
