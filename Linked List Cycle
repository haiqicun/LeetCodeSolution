/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 Time complexity: O(n); Space complexity: O(1);
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        if(head==null||head.next==null) return false;
        
        ListNode runner = head.next;
        ListNode walker = head;
        
        while(runner.next!=null&&runner.next.next!=null&&runner!=walker){
            runner = runner.next.next;
            walker = walker.next;
        }
        
        if(runner==walker) return true;
        return false;
        
    }
}



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return a boolean
    def hasCycle(self, head):
        
        if head==None or head.next== None: 
            return False
        
        walker = head
        runner = head.next
        
        while runner.next!=None and runner.next.next!=None and runner!=walker:
            runner = runner.next.next
            walker = walker.next
            
        if walker==runner:
            return True
        return False
