class Solution {
    public int lengthLongestPath(String input) {
        
        if (input == null || input.length() == 0) return 0;
        
        String[] parts = input.split("\n");
        Stack<Integer> stack = new Stack<Integer>();
        int res = 0;
        for (String part : parts) {
            int level = part.lastIndexOf("\t") + 1;
            while (stack.size() > level) {
                stack.pop();
            }
            int parent = stack.isEmpty() ? 0 : stack.peek() + 1;
            int can = parent + part.length() - level;
            if (part.indexOf(".") != -1) {
                res = Math.max(res, can);
            }
            stack.push(can);
        }
        return res;
    }
}



Time Complexity: O(n)
Space Complexity: O(n)
