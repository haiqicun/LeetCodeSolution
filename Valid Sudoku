public class Solution {
    public boolean isValidSudoku(char[][] board) {
        if (board == null || board.length != 9 || board[0].length != 9) return false;
        for (int m = 0; m < 9; m++) {
            if (!isValid(board, 0, 9, m, m+1)) return false;
            if (!isValid(board, m, m+1, 0, 9)) return false;
        }
        
        for (int m = 0; m < 3; m++) {
            for (int n = 0; n < 3; n++) {
                if (!isValid(board, m*3, m*3+3, n*3, n*3+3)) return false;
            }
        }
        return true;
    }
    
    public boolean isValid(char[][] board, int x1, int x2, int y1, int y2) {
        Set<Character> set = new HashSet<>();
        for (int i = x1; i < x2; i++) {
            for (int j = y1; j< y2; j++) {
                if (board[i][j] != '.' && !set.add(board[i][j])) {
                    return false;
                }
            }
        }
        return true;
    }
}

//Time complexity: check every row, check every column, check every block 
                   = 9 + 9 + 9 checks = 27 * 9 (every check will check 9 element)
